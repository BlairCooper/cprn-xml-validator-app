# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # Build and test code
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.rev-version.outputs.project_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # Build and test to ensure it's worth continuing
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    # Build and test to ensure it's worth continuing
    - name: Rev Version
      id: rev-version
      run: |
        mvn -B release:update-versions --file pom.xml
        echo "::set-output name=project_version::$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)"
      env:
        GITHUB_TOKEN: ${{ github.token }}



  build-linux-installer:
    name: Build Linux Installer on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb
        name: linux-installer
        retention-days: 1



  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-windows.cfg"

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        name: windows-installer
        retention-days: 1



  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-test, build-linux-installer, build-windows-installer]

    steps:
    # DOWNLOAD INSTALLERS
    - name: Download Linux installer
      uses: actions/download-artifact@v2
      with:
        name: linux-installer

    - name: Download Windows installer
      uses: actions/download-artifact@v2
      with:
        name: windows-installer

    - name: Rename downloaded files
      run: |
        ls -alR
        mv cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        ls -alR

    # CREATE GITHUB RELEASE AND ADD ASSETS
    - name: Create GitHub release
      id: create-release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-test.outputs.release_version }}
        release_name: Release ${{ needs.build-test.outputs.release_version }}
        draft: false
        prerelease: false

    - name: Release Linux installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_content_type: application/x-binary

    - name: Release Windows installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        asset_name: CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        asset_content_type: application/x-binary          


#    outputs:
#      upload_url: ${{ steps.create_release.outputs.upload_url }}
#      release_version: ${{ steps.prepare-release.outputs.project_version }}


#    - name: Create Release
#      id: create-release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: v${{ steps.prepare-release.outputs.project_version }}
#        release_name: Release ${{ steps.prepare-release.outputs.project_version }}


#  release_assets:
###    name: Release assets
#    needs: build # we need to know the upload URL
#    runs-on: ${{ matrix.config.os }} # we run many different builds

#    strategy:
      # just an example matrix
#      matrix:
#        config:
#          - os: ubuntu-latest
#          - os: macos-latest
#          - os: windows-latest

#    steps:
      # checkout of cource
#      - name: Checkout code
#        uses: actions/checkout@v1

#      - name: Set up JDK 15
#        uses: actions/setup-java@v1
#        with:
#          java-version: 15
        
#      - name: Setup Maven Settings
#        uses: s4u/maven-settings-action@v2.4.0
#        with:
#          servers: |
#            [{
#                "id": "maven.github.blair",
#                "username": "${{ secrets.USER_PACKAGE_READ }}",
#                "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
#            }]

      # Do JPackage here
#      - name: Build with Maven
#        id: create-package
#        run: mvn -B package jpackage:jpackage@${{ matrix.config.os }} -Drelease_version="${{ needs.build.outputs.release_version }}" --file pom.xml
#        env:
#          GITHUB_TOKEN: ${{ github.token }}

      # and finally do an upload!
 #     - name: Upload release assets
 #       uses: actions/upload-release-asset@v1
 #       env:
 #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 #       with:
 #         upload_url: ${{ needs.build.outputs.upload_url }}
          # This is how it will be named on the release page. Put whatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
 #         asset_name: CprnXmlValidator-${{ matrix.config.os }}-${{ needs.build.outputs.project_version }}
          # The path to the file you want to upload.
 #         asset_path: ./target/dist/CprnXmlValidator-${{ needs.build.outputs.project_version }}*
          # probably you will need to change it, but most likely you are
          # uploading a binary file
 #         asset_content_type: application/octet-stream

          
        #    - name: Build with Maven
#      id: prepare-release
#      run: |
#        # From pom.xml: grab the "artifactId" element
#        echo "::set-output name=project_name::$(sed -n -e 's/.*<artifactId>\(.*\)<\/artifactId>.*/\1/p' <<< cat pom.xml)"
#        # From pom.xml: grab the "version" element minus the -SNAPSHOT
#        echo "::set-output name=project_version::$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)"
#        mvn -B release:prepare release:perform --file pom.xml
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
