# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # Build and test code
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.get-version.outputs.project_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # Build and test to ensure it's worth continuing
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    # Get version number from POM
    - name: Get Version
      id: get-version
      run: echo "::set-output name=project_version::$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)"

    # Rev the version number for the next build
    - name: Rev Version
      id: rev-version
      run: |
        mvn -B release:update-versions --file pom.xml
        git add pom.xml
        echo -n "Rev version to $(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)" | git commit -F -
        git push
      env:
        GITHUB_TOKEN: ${{ github.token }}



  build-linux-installer:
    name: Build Linux Installer on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb
        name: linux-installer
        retention-days: 1



  build-mac-installer:
    name: Build Macintosh Installer
    runs-on: mac-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-mac.cfg"
        ls -alR ./target/dist/

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb
        name: mac-installer
        retention-days: 1



  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 15

    # Allows access to our other private repos for dependancies        
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-windows.cfg"

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        name: windows-installer
        retention-days: 1



  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-test, build-linux-installer, build-mac-installer, build-windows-installer]

    steps:
    # DOWNLOAD INSTALLERS
    - name: Download Linux installer
      uses: actions/download-artifact@v2
      with:
        name: linux-installer

    - name: Download Mac installer
      uses: actions/download-artifact@v2
      with:
        name: mac-installer

    - name: Download Windows installer
      uses: actions/download-artifact@v2
      with:
        name: windows-installer

    - name: Rename downloaded files
      run: |
        ls -alR
        mv cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        ls -alR

    # CREATE GITHUB RELEASE AND ADD ASSETS
    - name: Create GitHub release
      id: create-release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-test.outputs.release_version }}
        release_name: Release ${{ needs.build-test.outputs.release_version }}
        draft: false
        prerelease: false

    - name: Release Linux installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_content_type: application/x-binary

    - name: Release Mac installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-mac-${{ needs.build-test.outputs.release_version }}.deb
        asset_name: cprn-xml-validator-mac-${{ needs.build-test.outputs.release_version }}.deb
        asset_content_type: application/x-binary

    - name: Release Windows installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        asset_name: CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi
        asset_content_type: application/x-binary          
