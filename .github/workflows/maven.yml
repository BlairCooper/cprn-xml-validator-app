# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # Build and test code
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.get-version.outputs.project_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
         # Allows access to our other private repos for dependancies
         
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.1
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # Build and test to ensure it's worth continuing
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    # Get version number from POM
    - name: Get Version
      id: get-version
      run: echo "::set-output name=project_version::$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)"

    # Rev the version number for the next build
    - name: Rev Version
      id: rev-version
      run: |
        mvn -B release:update-versions --file pom.xml
        git add pom.xml
        echo -n "Rev version to $(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)" | git commit -F -
        git push
      env:
        GITHUB_TOKEN: ${{ github.token }}



  build-linux-app-image:
    name: Build Linux App Image on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
         # Allows access to our other private repos for dependancies

    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # Create the icon set for use by the application
    - name: Create Icon Set
      run: |
        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux-image.cfg"
        cp ./LICENSE ./target/dist/CprnXmlValidator/
        

    - name: Zip App Image
      run: |
        pushd ./target/dist/CprnXmlValidator
        tar -czvf ../cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz *
        popd 

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz
        name: linux-app-image
        retention-days: 1



  build-linux-deb-installer:
    name: Build Linux DEB Installer on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test, build-linux-app-image]

    steps:
    - name: Install additional code
      run: |
        sudo apt-get update -y
        sudo apt-get install libfreetype6 libx11-6
      
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
         # Allows access to our other private repos for dependancies
         
    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.1
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    - name: Download Linux app image
      uses: actions/download-artifact@v2
      with:
        name: linux-app-image

    # Create the icon set for use by the application
    - name: Create Icon Set
      run: |
        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mkdir ./app-image
        tar -xzvf ./cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz -C ./app-image
        jpackage --type deb --app-image ./app-image --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"
        mv ./target/dist/cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        name: linux-deb-installer
        retention-days: 1



  build-linux-rpm-installer:
    name: Build Linux RPM Installer on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test, build-linux-app-image]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
         # Allows access to our other private repos for dependancies

    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    - name: Download Linux app image
      uses: actions/download-artifact@v2
      with:
        name: linux-app-image

    # Create the icon set for use by the application
    - name: Create Icon Set
      run: |
        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mkdir ./app-image
        tar -xzvf ./cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz -C ./app-image
        jpackage --type rpm --app-image ./app-image --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"
        mv ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}-1.x86_64.rpm ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.rpm

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.rpm
        name: linux-rpm-installer
        retention-days: 1



  build-mac-installer:
    name: Build Macintosh Installer
    runs-on: macos-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
          # Allows access to our other private repos for dependancies

    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.1
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # Create the icon set for use by the application
    - name: Create Icon Set
      run: |
        mkdir icons.iconset
        cp icons/cprn-icon1024x1024.png icons.iconset/icon_512x512@2x.png
        sips -z 512 512   icons/cprn-icon1024x1024.png --out icons.iconset/icon_512x512.png
        sips -z 512 512   icons/cprn-icon1024x1024.png --out icons.iconset/icon_256x256@2x.png
        sips -z 256 256   icons/cprn-icon1024x1024.png --out icons.iconset/icon_256x256.png
        sips -z 256 256   icons/cprn-icon1024x1024.png --out icons.iconset/icon_128x128@2x.png
        sips -z 128 128   icons/cprn-icon1024x1024.png --out icons.iconset/icon_128x128.png
        sips -z 64 64     icons/cprn-icon1024x1024.png --out icons.iconset/icon_32x32@2x.png
        sips -z 32 32     icons/cprn-icon1024x1024.png --out icons.iconset/icon_32x32.png
        sips -z 32 32     icons/cprn-icon1024x1024.png --out icons.iconset/icon_16x16@2x.png
        sips -z 16 16     icons/cprn-icon1024x1024.png --out icons.iconset/icon_16x16.png
        iconutil -c icns -o icons/cprn.icns icons.iconset
        rm -R icons.iconset

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-mac.cfg"
        mv ./target/dist/CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.dmg ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.dmg

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.dmg
        name: mac-installer
        retention-days: 1



  build-windows-app-image:
    name: Build Windows app image
    runs-on: windows-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
          # Allows access to our other private repos for dependancies

    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.1
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-windows-image.cfg"
        copy ./LICENSE ./target/dist/CprnXmlValidator/
        attrib -R ./target/dist/CprnXmlValidator/*

    - name: Sign executable
#      uses: DanaBear/code-sign-action@v4
      uses: ./.github/actions/code-sign-action
      with:
        certificate: '${{ secrets.WINDOWS_CERT }}'
        certificatename: '${{ secrets.WINDOWS_CERT_NAME }}'
        folder: './target/dist/CprnXmlValidator'
        password: '${{ secrets.WINDOWS_KEY }}'
        timestampUrl: 'http://timestamp.sectigo.com'

    - name: Zip App Image
      run: |
        Compress-Archive -Path ./target/dist/CprnXmlValidator/* -DestinationPath ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.zip

    # SAVE INSTALLER
    - name: Upload Windows app image
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.zip
        name: windows-app-image
        retention-days: 1



  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    needs: [build-test, build-windows-app-image]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
          # Allows access to our other private repos for dependancies

    - name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.4.1
      with:
        servers: |
          [{
              "id": "maven.github.blair",
              "username": "${{ secrets.USER_PACKAGE_READ }}",
              "password": "${{ secrets.TOKEN_PACKAGE_READ }}"
          }]

    - name: Download Windows app image
      uses: actions/download-artifact@v2
      with:
        name: windows-app-image

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        Expand-Archive -Path ./cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.zip -DestinationPath ./app-image
        jpackage --app-image ./app-image --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-windows.cfg"
        ren ./target/dist/CprnXmlValidator-${{ needs.build-test.outputs.release_version }}.msi cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.msi
        attrib -R ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.msi

    - name: Sign msi
#      uses: DanaBear/code-sign-action@v4
      uses: ./.github/actions/code-sign-action
      with:
        certificate: '${{ secrets.WINDOWS_CERT }}'
        certificatename: '${{ secrets.WINDOWS_CERT_NAME }}'
        folder: './target/dist/'
        password: '${{ secrets.WINDOWS_KEY }}'
        timestampUrl: 'http://timestamp.sectigo.com'

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./target/dist/cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.msi
        name: windows-installer
        retention-days: 1


  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows-app-image, build-windows-installer, build-linux-app-image, build-linux-deb-installer, build-linux-rpm-installer, build-mac-installer]

    steps:
    # DOWNLOAD INSTALLERS
    - name: Download Linux App Image
      uses: actions/download-artifact@v2
      with:
        name: linux-app-image

    - name: Download Linux DEB installer
      uses: actions/download-artifact@v2
      with:
        name: linux-deb-installer

    - name: Download Linux RPM installer
      uses: actions/download-artifact@v2
      with:
        name: linux-rpm-installer

    - name: Download Mac installer
      uses: actions/download-artifact@v2
      with:
        name: mac-installer

    - name: Download Windows app image
      uses: actions/download-artifact@v2
      with:
        name: windows-app-image

    - name: Download Windows installer
      uses: actions/download-artifact@v2
      with:
        name: windows-installer

    - name: Rename downloaded files
      run: |
        ls -alR
#        mv cprn-xml-validator_${{ needs.build-test.outputs.release_version }}-1_amd64.deb cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
#        ls -alR

    # CREATE GITHUB RELEASE AND ADD ASSETS
    - name: Create GitHub release
      id: create-release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-test.outputs.release_version }}
        release_name: Release ${{ needs.build-test.outputs.release_version }}
        draft: false
        prerelease: false

    - name: Release Linux App Image
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.tar.gz
        asset_content_type: application/x-binary

    - name: Release Linux DEB installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.deb
        asset_content_type: application/x-binary

    - name: Release Linux RPM installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.rpm
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.rpm
        asset_content_type: application/x-binary

    - name: Release Mac installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.dmg
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.dmg
        asset_content_type: application/x-binary

    - name: Release Windows App Image
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.zip
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.zip
        asset_content_type: application/x-binary

    - name: Release Windows installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.msi
        asset_name: cprn-xml-validator-${{ needs.build-test.outputs.release_version }}.msi
        asset_content_type: application/x-binary
